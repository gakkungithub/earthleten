// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// データベースはsqliteを使う
datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// データベース表の形状の定義
// idは数値ではなく文字列の方がいい(数値だと桁数が限られてしまううえに、数値はフォーマットが沢山あるから)
model Thread {
  id        String    @id @default(cuid())
  user      User      @relation(fields: [uid], references: [id])
  uid       String
  title     String
  genres    ThreadOnGenre[]
  bdate     DateTime  @default(now())
  comments  Comment[]
}

model ThreadOnGenre {
  thread    Thread    @relation(fields: [tid], references: [id])
  tid       String
  genre     Genre     @relation(fields: [gid], references: [id])
  gid       String

  @@id([tid, gid])
}

model Sport {
  id        String    @id @default(cuid())
  sport     String    @unique
  wiki      WikiOnSport[]
}

model Genre {
  id        String    @id @default(cuid())
  genre     String    @unique
  threads   ThreadOnGenre[]
  wikipages WikiOnGenre[]
}

model Comment {
  id        String    @id @default(cuid())
  thread    Thread    @relation(fields: [tid], references: [id])
  tid       String
  user      User      @relation(fields: [uid], references: [id])
  uid       String
  talk      String
  image     CommentImage[]
  video     CommentVideo[]
  cdate     DateTime  @default(now())
}

model CommentImage {
  id        String    @id @default(cuid())
  url       String
  comment   Comment   @relation(fields: [cid], references: [id])
  cid       String
}

model CommentVideo {
  id        String    @id @default(cuid())
  url       String
  comment   Comment   @relation(fields: [cid], references: [id])
  cid       String    
}

enum Gender {
  MALE
  FEMALE
  PRIVATE
}

model User {
  id        String    @id @default(cuid())
  threads   Thread[]
  comments  Comment[]
  name      String    @unique
  password  String    
  gender    String    @default("private")
  bdate     DateTime?
  height    Float?
  weight    Float?
  image     String
}

enum RoleType {
  PLAYER
  COACH
}

// Wiki用のデータ
model Wiki {
  id                String   @id @default(cuid())
  name              String
  role              RoleType
  gender            Gender
  bdate             DateTime
  height            Float
  weight            Float
  isBdatePrivate    Boolean @default(false)
  isHeightPrivate   Boolean @default(false)
  isWeightPrivate   Boolean @default(false)
  bgColor           Color
  textColor         Color
  teamnames         TeamName[]
  sports            WikiOnSport[]
  genres            WikiOnGenre[]
  scripts           Script[]
  data              WikiData @relation(fields: [wdid], references: [id])
  wdid              String   @unique
  awards            Award[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

enum Color {
  RED
  ORANGE
  YELLOW
  LIME
  GREEN
  SKY
  BLUE
  PURPLE
  AMBER
  GRAY
  BLACK
  WHITE
}

model TeamName {
  id        String      @id @default(cuid())
  name      String
  start     Int
  end       Int?
  wiki      Wiki        @relation(fields: [wid], references: [id])
  wid       String
}

model WikiOnSport {
  wiki      Wiki      @relation(fields: [wid], references: [id])
  wid       String
  sport     Sport     @relation(fields: [sid], references: [id])
  sid       String

  @@id([wid, sid])
}

model WikiOnGenre {
  wiki      Wiki      @relation(fields: [wid], references: [id])
  wid       String
  genre     Genre     @relation(fields: [gid], references: [id])
  gid       String

  @@id([wid, gid])
}

model Script {
  id        String   @id @default(cuid())
  section   String
  wiki      Wiki     @relation(fields: [wid], references: [id])
  wid       String
  texts     ScriptText[]
}

model ScriptText {
  id       String   @id @default(cuid())
  text     String
  script   Script   @relation(fields: [sid], references: [id])
  sid      String
}

model WikiData {
  id            String                  @id @default(cuid())
  results       Result[]
  allowedColors AllowedHighlightColor[] // ハイライトの色の選択の制御はアプリ側で行う
  wiki          Wiki?
}

model Result {
  id            String                  @id @default(cuid())
  position      String
  columns       DataColumn[]
  rows          DataRow[]
  wikiData      WikiData                @relation(fields: [wdid], references: [id])
  wdid          String
}

model AllowedHighlightColor {
  id            String    @id @default(cuid())
  color         Color
  explanation   String
  wikiData      WikiData  @relation(fields: [wdid], references: [id])
  wdid          String
}

model DataColumn {
  id        String    @id @default(cuid())
  value     String
  result    Result  @relation(fields: [rid], references: [id])
  rid       String
}

model DataRow {
  id        String     @id @default(cuid())
  result    Result  @relation(fields: [rid], references: [id])
  rid       String
  cells     DataCell[]
}

model DataCell {
  id              String   @id @default(cuid())
  value           String?
  highlightColor  Color?
  row             DataRow  @relation(fields: [rowId], references: [id])
  rowId           String
}

model Award {
  id        String   @id @default(cuid())
  section   String
  wiki      Wiki     @relation(fields: [wid], references: [id])
  wid       String
  titles    AwardTitle[]
}

model AwardTitle {
  id       String   @id @default(cuid())
  name     String
  award    Award    @relation(fields: [awardId], references: [id])
  awardId  String
  years    AwardYear[]
}

model AwardYear {
  id           String        @id @default(cuid())
  year         Int
  awardTitle   AwardTitle    @relation(fields: [titleId], references: [id])
  titleId      String
}




